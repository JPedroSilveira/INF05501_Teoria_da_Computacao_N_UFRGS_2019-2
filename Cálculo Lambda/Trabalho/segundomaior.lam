let

 true        =  \x y. x ;
 false       =  \x y. y ;
 if          =  \a b c. a b c ;
 not         =  \a. a false true;
 and         =  \a b. a b false;
 or          =  \a b. a true b;
 implies     =  \a b. a b true;
 ifandonlyif =  \a b. a b (not b);
 succ        =  \n p q. p (n p q);
 add         =  \m n. m succ n;
 mult        =  \m n. m (add n) 0;
 exp         =  \m n. n m;
 isZero      =  \n. n (\x.false) true;
 pair        =  \m n b. b m n;
 first       =  \p. p true;
 second      =  \p. p false;
 shiftInc    =  \p. pair (second p) (succ (second p));
 pred        =  \n. first (n shiftInc (pair 0 0));
 empty       =  \x. true;
 cons        =  \h t. pair h t;
 isEmpty     =  \l.l (\x y.false);
 head        =  first;
 tail        =  second;
 Y           =  \f.(\x.f(x x))(\x.f(x x));
 isBigger_rec=  \M x y. (if (isZero x)
                            false
                            (if (isZero y)
                                true
                                (M (pred x) (pred y))));
 isBigger    = Y isBigger_rec;
 
 segundo_maior_aux_rec = \M l p. 
  (if (isEmpty l)
      p
      (if (isBigger (first l) (first p))
          (M (tail l) (pair (first l) (first p)))
          (if (isBigger (first l) (second p))
              (M (tail l) (pair (first p) (second l)))
              (M (tail l) p))));
 segundo_maior_aux = Y segundo_maior_aux_rec; 
 
 segundo_maior = \l.
   (second (segundo_maior_aux 
             (tail l) (pair (first l) (first l))))
                                                        
in 
 (segundo_maior 
   (cons 1 (cons 4 (cons 5 (cons 0 empty)))))
 
                                                                                                             