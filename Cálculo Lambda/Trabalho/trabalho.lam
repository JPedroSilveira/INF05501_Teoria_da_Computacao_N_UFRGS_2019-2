let

 true        =  \x y. x ;
 false       =  \x y. y ;
 if          =  \a b c. a b c ;
 not         =  \a. a false true;
 and         =  \a b. a b false;
 or          =  \a b. a true b;
 implies     =  \a b. a b true;
 ifandonlyif =  \a b. a b (not b);
 succ        =  \n p q. p (n p q);
 add         =  \m n. m succ n;
 mult        =  \m n. m (add n) 0;
 exp         =  \m n. n m;
 isZero      =  \n. n (\x.false) true;
 pair        =  \m n b. b m n;
 first       =  \p. p true;
 second      =  \p. p false;
 shiftInc    =  \p. pair (second p) (succ (second p));
 pred        =  \n. first (n shiftInc (pair 0 0));
 empty       =  \x. true;
 cons        =  \h t. pair h t;
 isEmpty     =  \l.l (\x y.false);
 head        =  first;
 tail        =  second;
 Y           =  \f.(\x.f(x x))(\x.f(x x));

 entremear_rec  = \M u l. (if (isEmpty l) 
                               empty    
                               (cons  
                                  (head l)
                                  (cons u (M u (tail l)))
                               )
                           ); 
 entremear = Y entremear_rec; 

 descompactar_primeiros_rec = \M l. (if (isEmpty l)
                                     empty
                                     (cons (first (first l))
                                           (M (tail l)))); 
 descompactar_primeiros = Y descompactar_primeiros_rec;

 descompactar_segundos_rec = \M l. 
   (if (isEmpty l)
      empty
      (cons (second (first l)) (M (tail l))));

 descompactar_segundos = Y descompactar_segundos_rec;
  
 descompactar = \l. (pair (descompactar_primeiros l)
                          (descompactar_segundos  l));

 isBigger_rec=  \M x y. (if (isZero x)
                            false
                            (if (isZero y)
                                true
                                (M (pred x) (pred y))));
 isBigger    = Y isBigger_rec;
 
 segundo_maior_aux_rec = \M l p. 
  (if (isEmpty l)
      p
      (if (isBigger (first l) (first p))
          (M (tail l) (pair (first l) (first p)))
          (if (isBigger (first l) (second p))
              (M (tail l) (pair (first p) (second l)))
              (M (tail l) p))));
 segundo_maior_aux = Y segundo_maior_aux_rec; 
 
 segundomaior = \l.
   (second (segundo_maior_aux 
             (tail l) (pair (first l) (first l))));
 
 add_end_rec = \M n l.
    (if (isEmpty l)
        (cons n empty)
        (cons (first l) (M n (tail l))));

 add_end = Y add_end_rec;    

 get_list_rec = \M l n.
    (if (isEmpty l)
         empty
         (if (isZero n)
             (first l)
             (M (tail l) (pred n))));

 get_list = Y get_list_rec; 

 progaritm_aux_rec = \M si r n sl. 
    (if (isZero n)
        sl
        (M (add si r) r (pred n) (add_end si sl)));

 progaritm_aux = Y progaritm_aux_rec;

 progaritm = \i r n. 
   (progaritm_aux 
    i
    r 
    n
    empty);  
 
 entremear_caso_base = (entremear 1 empty);

 entremear_dois_e_um = (entremear 2 (cons 1(cons 1 (cons 1 
                        empty))));

 resultado_estremear_dois_e_um = (cons 1 (cons 2 (cons 1 
                      (cons 2 (cons 1 (cons 2 empty))))));

 descompactar_teste_vazio = 
   (descompactar empty);

 descompactar_teste_vazio_resultado = 
   (pair empty empty);

 descompactar_teste_n = 
   (descompactar 
      (cons (pair 1 2) 
        (cons (pair 3 4) empty)));

 descompactar_teste_n_resultado = 
   (cons 
     (cons 1 (cons 3 empty))
       (cons 2 (cons 4 empty)));

 segundo_maior_teste = 
  (segundomaior 
   (cons 1 (cons 4 (cons 5 (cons 0 empty)))));

 progaritm_teste = (progaritm 4 1 2);
                                                        
in 
 progaritm_teste
 
                                                                                                             