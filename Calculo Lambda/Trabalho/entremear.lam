let

 true        =  \x y. x ;
 false       =  \x y. y ;
 if          =  \a b c. a b c ;
 not         =  \a. a false true;
 and         =  \a b. a b false;
 or          =  \a b. a true b;
 implies     =  \a b. a b true;
 ifandonlyif =  \a b. a b (not b);
 succ        =  \n p q. p (n p q);
 add         =  \m n. m succ n;
 mult        =  \m n. m (add n) 0;
 exp         =  \m n. n m;
 isZero      =  \n. n (\x.false) true;
 pair        =  \m n b. b m n;
 fst         =  \p. p true;
 snd         =  \p. p false;
 shiftInc    =  \p. pair (snd p) (succ (snd p));
 pred        =  \n. fst (n shiftInc (pair 0 0));
 empty       =  \x. true;
 cons        =  \h t. pair h t;
 isEmpty     =  \l.l (\x y.false);
 head        =  fst;
 tail        =  snd;
 Y           =  \f.(\x.f(x x))(\x.f(x x));
 l           =  empty;
 u           =  5;
 entremear_rec  = \M u l. (if (isEmpty l) 
                               empty    
                               (cons  
                                  (head l)
                                  (cons u (M u (tail l)))
                               )
                           ); 
 entremear   = Y entremear_rec; 
 entremear_caso_base = (entremear 1 empty);
 entremear_dois_e_um = (entremear 2 (cons 1(cons 1 (cons 1 
                        empty))));
 resultado_estremear_dois_e_um = (cons 1 (cons 2 (cons 1 
                      (cons 2 (cons 1 (cons 2 empty))))));
in 
 entremear_dois_e_um
 
                                 