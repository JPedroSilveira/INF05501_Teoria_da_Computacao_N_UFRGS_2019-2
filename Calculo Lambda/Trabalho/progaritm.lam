let

 true        =  \x y. x ;
 false       =  \x y. y ;
 if          =  \a b c. a b c ;
 not         =  \a. a false true;
 and         =  \a b. a b false;
 or          =  \a b. a true b;
 implies     =  \a b. a b true;
 ifandonlyif =  \a b. a b (not b);
 succ        =  \n p q. p (n p q);
 add         =  \m n. m succ n;
 mult        =  \m n. m (add n) 0;
 exp         =  \m n. n m;
 isZero      =  \n. n (\x.false) true;
 pair        =  \m n b. b m n;
 first       =  \p. p true;
 second      =  \p. p false;
 shiftInc    =  \p. pair (second p) (succ (second p));
 pred        =  \n. first (n shiftInc (pair 0 0));
 empty       =  \x. true;
 cons        =  \h t. pair h t;
 isEmpty     =  \l.l (\x y.false);
 head        =  first;
 tail        =  second;
 Y           =  \f.(\x.f(x x))(\x.f(x x));
 
 add_end_rec = \M n l.
    (if (isEmpty l)
        (cons n empty)
        (cons (first l) (M n (tail l))));

 add_end = Y add_end_rec;    

 get_list_rec = \M l n.
    (if (isEmpty l)
         empty
         (if (isZero n)
             (first l)
             (M (tail l) (pred n))));

 get_list = Y get_list_rec; 

 progaritm_aux_rec = \M si r n sl. 
    (if (isZero n)
        sl
        (M (add si r) r (pred n) (add_end si sl)));

 progaritm_aux = Y progaritm_aux_rec;

 progaritm = \l. 
   (progaritm_aux 
    (get_list l 0)
    (get_list l 1) 
    (get_list l 2)
    empty);  
                                                        
in 
 (progaritm (cons 0 (cons 3 (cons 4 empty))))
 
                                                                                                             